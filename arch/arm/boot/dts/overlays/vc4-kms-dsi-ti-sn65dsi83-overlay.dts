/dts-v1/;
/plugin/;

#include <dt-bindings/gpio/gpio.h>

/ {
    compatible = "brcm,bcm2835";
    fragment@0 {
        target-path = "/";
        __overlay__ {
            //vdd_panel: fixedregulator {
            //    regulator-boot-on;
            //    compatible = "regulator-fixed";
            //    regulator-name = "lvds18";
            //    regulator-min-microvolt = <1800000>;
            //    regulator-max-microvolt = <1800000>;
            //    gpio = <&gpio 26 0>;
            //    startup-delay-us = <70000>;
            //    enable-active-high;
            //    vin-supply = <&vdd_3v3_reg>;
            //};

            //panel_rgb: panel {
            panel: panel {
              compatible = "cdtech,s101hwx34hd";
              // power-supply = <&vdd_panel>;
              status = "okay";
              port {
                panel_lvds_in: endpoint {
                  remote-endpoint = <&bridge_lvds_port>;
                };
              };
            };
        };
    };

    fragment@1 {
        //target = <&i2c1>;
        target = <&i2c_csi_dsi>;
        __overlay__ {
            #address-cells = <1>;
            #size-cells = <0>;
            status = "okay";

            sn65dsi83_bridge: bridge@2d {
                compatible = "ti,sn65dsi83";
                reg = <0x2d>;
                // status = "okay";
                // enable-gpios = <&gpio 7 0>;
                // power-supply = <&vdd_panel>;

                ports {                
                    #address-cells = <1>;
                    #size-cells = <0>;
                    port@0 {
                        reg = <0>; // TODO: double-check
                        bridge_dsi_port: endpoint {
                            // data-lanes = <1 2 3 4>;
                            data-lanes = <0 1 2>;
                            remote-endpoint = <&dsi_out_port>;
                        };
                    };

                    port@2{
                        reg = <2>;
                        bridge_lvds_port: endpoint {
                            remote-endpoint = <&panel_lvds_in>;
                        };
                    };
                };
            };
        };
    };

    fragment@2 {
        target = <&dsi1>;
        __overlay__ {
            status = "okay";
            port {
                dsi_out_port: endpoint {
                    remote-endpoint = <&bridge_dsi_port>;
                    // data-lanes = <0 1 2 3>;
                    data-lanes = <0 1 2>;
                };
            };
        };
    };

    fragment@3 {
		target = <&i2c0if>;
		__overlay__ {
			status = "okay";
            clock-frequency = <400000>;
		};
	};
		
	fragment@6 {
		target = <&i2c0mux>;
		__overlay__ {
			status = "okay";
		};
	};
};